'use strict';

import {parseProposalCreatedData, parseDynamicArrayOfDynamic, parseDynamicBytes, parseOffset, parseUTF8String} from '../eth/abi.js';
import {getProposalCreatedHexData,assertEqual} from "./utils.js";


const testParseByteArray = () => {
    // Raw data emitted by the event
    const rawEventData = "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000064beabacc8000000000000000000000000912ce59144191c1204e64559fe8253a0e49e6548000000000000000000000000ac20cd734c65baf48a1476447af7d3e3165dc7390000000000000000000000000000000000000000001581b6d300d0225a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    // offsets to dynamic array
    const pointer = parseOffset(rawEventData, 0)
    // read the dynamic array
    const decoded = parseDynamicArrayOfDynamic(rawEventData, Number(pointer), parseDynamicBytes)

    assertEqual(decoded.length, 2)
    assertEqual(decoded[0], "0xbeabacc8000000000000000000000000912ce59144191c1204e64559fe8253a0e49e6548000000000000000000000000ac20cd734c65baf48a1476447af7d3e3165dc7390000000000000000000000000000000000000000001581b6d300d0225a000000")
    assertEqual(decoded[1], undefined)

    console.log("success testParseByteArray")
}


const testParseProposalCreated = () => {
    const hexData = getProposalCreatedHexData();

    const parsed = parseProposalCreatedData(hexData);

    assertEqual(parsed.proposalId, BigInt("0xf5a34ab5f98bb969a67846b79a665af9fec196b33a178c860cce2b9037b38d49"))
    assertEqual(parsed.proposer, "0xb4c064f466931b8d0f637654c916e3f203c46f13")
    
    assertEqual(parsed.startBlock, BigInt(21341359))
    assertEqual(parsed.endBlock, BigInt(21442159))
    
    assertEqual(parsed.targets.length, 2)
    assertEqual(parsed.targets[0], "0xf3fc178157fb3c87548baa86f9d24ba38e649b58")
    assertEqual(parsed.targets[1], "0xac20cd734c65baf48a1476447af7d3e3165dc739")
    
    assertEqual(parsed.values.length, 2)
    assertEqual(parsed.values[0], BigInt(0))
    assertEqual(parsed.values[1], BigInt(7500000000000000000000))

    assertEqual(parsed.calldatas.length, 2)
    assertEqual(parsed.calldatas[0], "0xBEABACC8000000000000000000000000912CE59144191C1204E64559FE8253A0E49E6548000000000000000000000000AC20CD734C65BAF48A1476447AF7D3E3165DC7390000000000000000000000000000000000000000001581B6D300D0225A000000".toLowerCase())
    assertEqual(parsed.calldatas[1], "0x")

    assertEqual(parsed.signatures[0], "")
    assertEqual(parsed.signatures[1], "")
    assertEqual(parsed.signatures.length, 2)

    console.log("success testParseProposalCreated")
}

const testParseProposalCreated2 = () => {
    const hexData = "0x000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000002cf6f0000000000000000000000000000000000000000000000000000000000";

    const parsed = parseProposalCreatedData(hexData);

    assertEqual(parsed.proposalId, BigInt("1"))
    assertEqual(parsed.proposer, "0x0000000000000000000000000000000000000002")
    
    assertEqual(parsed.startBlock, BigInt(4))
    assertEqual(parsed.endBlock, BigInt(5))
    
    assertEqual(parsed.targets.length, 2)
    assertEqual(parsed.targets[0], "0x0000000000000000000000000000000000000003")
    assertEqual(parsed.targets[1], "0x0000000000000000000000000000000000000004")
    
    assertEqual(parsed.values.length, 2)
    assertEqual(parsed.values[0], BigInt(5))
    assertEqual(parsed.values[1], BigInt(6))

    assertEqual(parsed.calldatas.length, 2)
    assertEqual(parsed.calldatas[0], "0x")
    assertEqual(parsed.calldatas[1], "0x12345678")

    assertEqual(parsed.signatures[0], "7")
    assertEqual(parsed.signatures[1], "8")
    assertEqual(parsed.signatures.length, 2)

    console.log("success testParseProposalCreated2")
}

const testParseStringArray1 = () => {
    const rawEventData = "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000003666f6f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036261720000000000000000000000000000000000000000000000000000000000"

    const pointer = parseOffset(rawEventData, 0)
    const decoded = parseDynamicArrayOfDynamic(rawEventData, Number(pointer), parseUTF8String)

    assertEqual(decoded.length, 2)
    assertEqual(decoded[0].toString(), "foo")
    assertEqual(decoded[1], "bar")

    console.log("success testParseStringArray1")
}

const testParseStringArray2 = () => {
    const rawEventData = "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000003666f6f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"

    const pointer = parseOffset(rawEventData, 0)
    const decoded = parseDynamicArrayOfDynamic(rawEventData, Number(pointer), parseUTF8String)

    assertEqual(decoded.length, 2)
    assertEqual(decoded[0], "foo")
    assertEqual(decoded[1], undefined)

    console.log("success testParseStringArray2")
}


const testParseStringArray3 = () => {
    const rawEventData = "000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"

    const pointer = parseOffset(rawEventData, 0)
    const decoded = parseDynamicArrayOfDynamic(rawEventData, Number(pointer), parseUTF8String)

    assertEqual(decoded.length, 2)
    assertEqual(decoded[0], undefined)
    assertEqual(decoded[1], undefined)

    console.log("success testParseStringArray3")
}

const testParseStringArray4 = () => {
    const rawEventData = "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036261720000000000000000000000000000000000000000000000000000000000"

    const pointer = parseOffset(rawEventData, 0)
    const decoded = parseDynamicArrayOfDynamic(rawEventData, Number(pointer), parseUTF8String)

    assertEqual(decoded.length, 2)
    assertEqual(decoded[0], undefined)
    assertEqual(decoded[1], "bar")

    console.log("success testParseStringArray4")
}

testParseStringArray1()
testParseStringArray2()
testParseStringArray3()
testParseStringArray4()
testParseByteArray()
testParseProposalCreated()
testParseProposalCreated2()
